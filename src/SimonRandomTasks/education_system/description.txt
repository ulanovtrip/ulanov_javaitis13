Формализовал:

ТЗ Образовательная система


1.1) Спроектировать классы образовательный курс, студент, преподаватель.

Поля класса Course:
 - Название
 - Количество часов
  - Tutor
 - Массив Student

Поля класса Student:
 - FIO
 - возраст
  - Название группы (академической, пример 11-801)
 - массивы класса CourseScore

Поля класса Tutor:
 - FIO
 - Age
 - массив Course (на которых преподаёт)
 - salary

Поля класса CourseScore
 - Course
 - score (double - число отражающее текущего количество баллов ученика на курсе)

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1.2) Создать классы, отвечающие за создание (генерацию) образовательных курсов,
автоматическое создание студентов и преподавателей.

Необходимо создать классы CourseGenerator, StudentGenerator, TutorGenerator

В классе CourseGenerator должны быть реализованы 2 метода:
 - public Course[] generateCourses( int size);
 - public Course generateCourse();

В остальных классах по аналогии должны быть реализованы 2 похожих метода
( например для класса StudentGenerator должны быть методы
 - public Student[] generateStudents( int size);
 - public Student generateStudent();

 ⁃ Заполнение рандомными данными производится на Ваше усмотрение
 (генерируете классом Random, читаете из файла или любой другой способ)

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

1.3) Классы отвечающие за форматированный вывод информации по образовательным курсам,
обучающимся студентам, преподавателям.

Необходимо реализовать классы реализующие вывод информации:
CoursePrinter, TutorPrinter, StudentPrinter

 ⁃ Рассмотрим задание на примере класса CoursePrinter: он будет содержать один публичный метод:
 ⁃ Public void printArrayOfCourses( Course[], int case);
   case - вариант отображение информации: их будет всего 3

 1. Вывод информации относящейся непосредственно к курсу: название, количество часов и другие дополнительные поля
 (если Вы их добавите в сущность Course)

 2. Вывод информации о курсе, краткие сведения о его студентах (поля FIO, age, названое группы),
 краткие сведения о преподавателе (fio, age, salary)

 3. Вывод информации о курсе, полные сведения о каждом студенте (включая все поля), полную информацию о преподавателе (включая все поля)

Другие классы должны содержать аналогичные методы, с аналогичными способами вывода для своей сущности

1.4) Создать классы отвечающие за анализ статистики:
CourseStatistics, TutorStatistics, StudentStatistics

 ⁃ В этих классах Вы называете методы как хотите, возвращаете какие угодно значения, главное реализовать следующий функционал:

 ⁃ Вывод списка самых популярных курсов (курсы, на которые ходит наибольшее количество студентов)
 ⁃ Вывод списка самых успешных студентов (успешность студента определяется его средним баллом - среднее арифметическое по всем изучаемым конкретным студентом курсам)
 ⁃ Вывод списка самых популярных преподавателей ( популярность основывается на количестве курсов, которые преподаватель ведёт)